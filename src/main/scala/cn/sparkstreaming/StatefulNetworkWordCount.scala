package cn.sparkstreaming


import org.apache.spark.SparkConf
import org.apache.spark.streaming.{Seconds, State, StateSpec, StreamingContext}

object StatefulNetworkWordCount {
  def main(args:Array[String]){
    if(args.length <2){
      System.err.println("Usage: StatefulNetworkWordCount <hostname> <port>")
      System.exit(1)
    }

    //StreamingExamples.setStreamingLogLevels()

    val sparkConf =new SparkConf().setAppName("StatefulNetworkWordCount")
    // Create the context with a 1 second batch size
    val ssc =new StreamingContext(sparkConf,Seconds(1))
    //ssc.checkpoint(".")
    val lines = ssc.socketTextStream("localhost", 9999)
    // Initial state RDD for mapWithState operation
    val initialRDD = ssc.sparkContext.parallelize(List(("hello",1),("world",1)))

    // Create a ReceiverInputDStream on target ip:port and count the
    // words in input stream of \n delimited test (eg. generated by 'nc')

    val words = lines.flatMap(_.split(" "))
    val wordDstream = words.map(x =>(x,1))

    // Update the cumulative count using mapWithState
    // This will give a DStream made of state (which is the cumulative count of the words)
    val mappingFunc =(word:String, one:Option[Int], state:State[Int])=>{
      val sum = one.getOrElse(0)+ state.getOption.getOrElse(0)
      val output =(word, sum)
      state.update(sum)
      output
    }

    val stateDstream = wordDstream.mapWithState(
      StateSpec.function(mappingFunc).initialState(initialRDD))
    stateDstream.print()
    ssc.start()
    ssc.awaitTermination()
  }
}
